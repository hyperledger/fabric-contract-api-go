# Copyright the Hyperledger Fabric contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)
trigger:
  batch: false
  branches:
    include:
      - master
  tags:
    include:
      - '*'

variables:
  GOPATH: $(Agent.BuildDirectory)/go
  GOBIN: $(Agent.BuildDirectory)/go/bin
  GOVER: 1.14.7
  PATH: $(Agent.BuildDirectory)/go/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
  branch: $[ coalesce(variables['system.PullRequest.TargetBranch'], variables['build.SourceBranchName']) ]

pool:
  vmImage: ubuntu-16.04

steps:
  - checkout: self
    clean: true
    fetchDepth: 1

  - template: install_deps.yml

  - script: .azure-pipelines/scripts/lint.sh
    displayName: Vet and lint

  - script:
      license-check-and-add check -f .azure-pipelines/resources/license-config.json
    displayName: Check licenses

  - script: go test -race ./... -v
    displayName: Run tests

  - script: cd internal/functionaltests && godog
    displayName: Run functional tests

  - script: .azure-pipelines/scripts/tutorial-checks.sh
    displayName: Check tutorial contents

  - script: |
      .azure-pipelines/scripts/setup-integration-chaincode.sh
      fabric-chaincode-integration run --chaincode-dir .azure-pipelines/resources/chaincode  --language golang --logging-level debug --tags @single-org
    displayName: Run single-org integration tests

  # Work around fabric-chaincode-integration issue by running three-org tests separately
  - script: |
      .azure-pipelines/scripts/setup-integration-chaincode.sh
      fabric-chaincode-integration run --chaincode-dir .azure-pipelines/resources/chaincode  --language golang --logging-level debug --tags @three-org
    displayName: Run three-org integration tests

  - script: .azure-pipelines/scripts/release-checks.sh $(Build.SourceBranchName)
    displayName: Release checklist
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))


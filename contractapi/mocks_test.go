// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package contractapi

import (
	"github.com/hyperledger/fabric-chaincode-go/v2/shim"
	"github.com/hyperledger/fabric-protos-go-apiv2/peer"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// NewMockChaincodeStubInterface creates a new instance of MockChaincodeStubInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChaincodeStubInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChaincodeStubInterface {
	mock := &MockChaincodeStubInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChaincodeStubInterface is an autogenerated mock type for the chaincodeStubInterface type
type MockChaincodeStubInterface struct {
	mock.Mock
}

type MockChaincodeStubInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChaincodeStubInterface) EXPECT() *MockChaincodeStubInterface_Expecter {
	return &MockChaincodeStubInterface_Expecter{mock: &_m.Mock}
}

// CreateCompositeKey provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) CreateCompositeKey(objectType string, attributes []string) (string, error) {
	ret := _mock.Called(objectType, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompositeKey")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string) (string, error)); ok {
		return returnFunc(objectType, attributes)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string) string); ok {
		r0 = returnFunc(objectType, attributes)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = returnFunc(objectType, attributes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_CreateCompositeKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCompositeKey'
type MockChaincodeStubInterface_CreateCompositeKey_Call struct {
	*mock.Call
}

// CreateCompositeKey is a helper method to define mock.On call
//   - objectType
//   - attributes
func (_e *MockChaincodeStubInterface_Expecter) CreateCompositeKey(objectType interface{}, attributes interface{}) *MockChaincodeStubInterface_CreateCompositeKey_Call {
	return &MockChaincodeStubInterface_CreateCompositeKey_Call{Call: _e.mock.On("CreateCompositeKey", objectType, attributes)}
}

func (_c *MockChaincodeStubInterface_CreateCompositeKey_Call) Run(run func(objectType string, attributes []string)) *MockChaincodeStubInterface_CreateCompositeKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_CreateCompositeKey_Call) Return(s string, err error) *MockChaincodeStubInterface_CreateCompositeKey_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockChaincodeStubInterface_CreateCompositeKey_Call) RunAndReturn(run func(objectType string, attributes []string) (string, error)) *MockChaincodeStubInterface_CreateCompositeKey_Call {
	_c.Call.Return(run)
	return _c
}

// DelPrivateData provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) DelPrivateData(collection string, key string) error {
	ret := _mock.Called(collection, key)

	if len(ret) == 0 {
		panic("no return value specified for DelPrivateData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(collection, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_DelPrivateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelPrivateData'
type MockChaincodeStubInterface_DelPrivateData_Call struct {
	*mock.Call
}

// DelPrivateData is a helper method to define mock.On call
//   - collection
//   - key
func (_e *MockChaincodeStubInterface_Expecter) DelPrivateData(collection interface{}, key interface{}) *MockChaincodeStubInterface_DelPrivateData_Call {
	return &MockChaincodeStubInterface_DelPrivateData_Call{Call: _e.mock.On("DelPrivateData", collection, key)}
}

func (_c *MockChaincodeStubInterface_DelPrivateData_Call) Run(run func(collection string, key string)) *MockChaincodeStubInterface_DelPrivateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_DelPrivateData_Call) Return(err error) *MockChaincodeStubInterface_DelPrivateData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_DelPrivateData_Call) RunAndReturn(run func(collection string, key string) error) *MockChaincodeStubInterface_DelPrivateData_Call {
	_c.Call.Return(run)
	return _c
}

// DelState provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) DelState(key string) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DelState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_DelState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelState'
type MockChaincodeStubInterface_DelState_Call struct {
	*mock.Call
}

// DelState is a helper method to define mock.On call
//   - key
func (_e *MockChaincodeStubInterface_Expecter) DelState(key interface{}) *MockChaincodeStubInterface_DelState_Call {
	return &MockChaincodeStubInterface_DelState_Call{Call: _e.mock.On("DelState", key)}
}

func (_c *MockChaincodeStubInterface_DelState_Call) Run(run func(key string)) *MockChaincodeStubInterface_DelState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_DelState_Call) Return(err error) *MockChaincodeStubInterface_DelState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_DelState_Call) RunAndReturn(run func(key string) error) *MockChaincodeStubInterface_DelState_Call {
	_c.Call.Return(run)
	return _c
}

// FinishWriteBatch provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) FinishWriteBatch() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinishWriteBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_FinishWriteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishWriteBatch'
type MockChaincodeStubInterface_FinishWriteBatch_Call struct {
	*mock.Call
}

// FinishWriteBatch is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) FinishWriteBatch() *MockChaincodeStubInterface_FinishWriteBatch_Call {
	return &MockChaincodeStubInterface_FinishWriteBatch_Call{Call: _e.mock.On("FinishWriteBatch")}
}

func (_c *MockChaincodeStubInterface_FinishWriteBatch_Call) Run(run func()) *MockChaincodeStubInterface_FinishWriteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_FinishWriteBatch_Call) Return(err error) *MockChaincodeStubInterface_FinishWriteBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_FinishWriteBatch_Call) RunAndReturn(run func() error) *MockChaincodeStubInterface_FinishWriteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStatesCompositeKeyWithPagination provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetAllStatesCompositeKeyWithPagination(pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _mock.Called(pageSize, bookmark)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStatesCompositeKeyWithPagination")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 *peer.QueryResponseMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(int32, string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)); ok {
		return returnFunc(pageSize, bookmark)
	}
	if returnFunc, ok := ret.Get(0).(func(int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int32, string) *peer.QueryResponseMetadata); ok {
		r1 = returnFunc(pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(int32, string) error); ok {
		r2 = returnFunc(pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStatesCompositeKeyWithPagination'
type MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call struct {
	*mock.Call
}

// GetAllStatesCompositeKeyWithPagination is a helper method to define mock.On call
//   - pageSize
//   - bookmark
func (_e *MockChaincodeStubInterface_Expecter) GetAllStatesCompositeKeyWithPagination(pageSize interface{}, bookmark interface{}) *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call {
	return &MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call{Call: _e.mock.On("GetAllStatesCompositeKeyWithPagination", pageSize, bookmark)}
}

func (_c *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call) Run(run func(pageSize int32, bookmark string)) *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, queryResponseMetadata *peer.QueryResponseMetadata, err error) *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call {
	_c.Call.Return(stateQueryIteratorInterface, queryResponseMetadata, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call) RunAndReturn(run func(pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)) *MockChaincodeStubInterface_GetAllStatesCompositeKeyWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// GetArgs provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetArgs() [][]byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArgs")
	}

	var r0 [][]byte
	if returnFunc, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}
	return r0
}

// MockChaincodeStubInterface_GetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArgs'
type MockChaincodeStubInterface_GetArgs_Call struct {
	*mock.Call
}

// GetArgs is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetArgs() *MockChaincodeStubInterface_GetArgs_Call {
	return &MockChaincodeStubInterface_GetArgs_Call{Call: _e.mock.On("GetArgs")}
}

func (_c *MockChaincodeStubInterface_GetArgs_Call) Run(run func()) *MockChaincodeStubInterface_GetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetArgs_Call) Return(bytess [][]byte) *MockChaincodeStubInterface_GetArgs_Call {
	_c.Call.Return(bytess)
	return _c
}

func (_c *MockChaincodeStubInterface_GetArgs_Call) RunAndReturn(run func() [][]byte) *MockChaincodeStubInterface_GetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetArgsSlice provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetArgsSlice() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArgsSlice")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetArgsSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArgsSlice'
type MockChaincodeStubInterface_GetArgsSlice_Call struct {
	*mock.Call
}

// GetArgsSlice is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetArgsSlice() *MockChaincodeStubInterface_GetArgsSlice_Call {
	return &MockChaincodeStubInterface_GetArgsSlice_Call{Call: _e.mock.On("GetArgsSlice")}
}

func (_c *MockChaincodeStubInterface_GetArgsSlice_Call) Run(run func()) *MockChaincodeStubInterface_GetArgsSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetArgsSlice_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetArgsSlice_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetArgsSlice_Call) RunAndReturn(run func() ([]byte, error)) *MockChaincodeStubInterface_GetArgsSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetBinding provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetBinding() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBinding")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBinding'
type MockChaincodeStubInterface_GetBinding_Call struct {
	*mock.Call
}

// GetBinding is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetBinding() *MockChaincodeStubInterface_GetBinding_Call {
	return &MockChaincodeStubInterface_GetBinding_Call{Call: _e.mock.On("GetBinding")}
}

func (_c *MockChaincodeStubInterface_GetBinding_Call) Run(run func()) *MockChaincodeStubInterface_GetBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetBinding_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetBinding_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetBinding_Call) RunAndReturn(run func() ([]byte, error)) *MockChaincodeStubInterface_GetBinding_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelID provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetChannelID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannelID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockChaincodeStubInterface_GetChannelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelID'
type MockChaincodeStubInterface_GetChannelID_Call struct {
	*mock.Call
}

// GetChannelID is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetChannelID() *MockChaincodeStubInterface_GetChannelID_Call {
	return &MockChaincodeStubInterface_GetChannelID_Call{Call: _e.mock.On("GetChannelID")}
}

func (_c *MockChaincodeStubInterface_GetChannelID_Call) Run(run func()) *MockChaincodeStubInterface_GetChannelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetChannelID_Call) Return(s string) *MockChaincodeStubInterface_GetChannelID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockChaincodeStubInterface_GetChannelID_Call) RunAndReturn(run func() string) *MockChaincodeStubInterface_GetChannelID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreator provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetCreator() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreator")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreator'
type MockChaincodeStubInterface_GetCreator_Call struct {
	*mock.Call
}

// GetCreator is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetCreator() *MockChaincodeStubInterface_GetCreator_Call {
	return &MockChaincodeStubInterface_GetCreator_Call{Call: _e.mock.On("GetCreator")}
}

func (_c *MockChaincodeStubInterface_GetCreator_Call) Run(run func()) *MockChaincodeStubInterface_GetCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetCreator_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetCreator_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetCreator_Call) RunAndReturn(run func() ([]byte, error)) *MockChaincodeStubInterface_GetCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetDecorations provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetDecorations() map[string][]byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDecorations")
	}

	var r0 map[string][]byte
	if returnFunc, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}
	return r0
}

// MockChaincodeStubInterface_GetDecorations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecorations'
type MockChaincodeStubInterface_GetDecorations_Call struct {
	*mock.Call
}

// GetDecorations is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetDecorations() *MockChaincodeStubInterface_GetDecorations_Call {
	return &MockChaincodeStubInterface_GetDecorations_Call{Call: _e.mock.On("GetDecorations")}
}

func (_c *MockChaincodeStubInterface_GetDecorations_Call) Run(run func()) *MockChaincodeStubInterface_GetDecorations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetDecorations_Call) Return(stringToBytes map[string][]byte) *MockChaincodeStubInterface_GetDecorations_Call {
	_c.Call.Return(stringToBytes)
	return _c
}

func (_c *MockChaincodeStubInterface_GetDecorations_Call) RunAndReturn(run func() map[string][]byte) *MockChaincodeStubInterface_GetDecorations_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionAndParameters provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetFunctionAndParameters() (string, []string) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionAndParameters")
	}

	var r0 string
	var r1 []string
	if returnFunc, ok := ret.Get(0).(func() (string, []string)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() []string); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetFunctionAndParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionAndParameters'
type MockChaincodeStubInterface_GetFunctionAndParameters_Call struct {
	*mock.Call
}

// GetFunctionAndParameters is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetFunctionAndParameters() *MockChaincodeStubInterface_GetFunctionAndParameters_Call {
	return &MockChaincodeStubInterface_GetFunctionAndParameters_Call{Call: _e.mock.On("GetFunctionAndParameters")}
}

func (_c *MockChaincodeStubInterface_GetFunctionAndParameters_Call) Run(run func()) *MockChaincodeStubInterface_GetFunctionAndParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetFunctionAndParameters_Call) Return(s string, strings []string) *MockChaincodeStubInterface_GetFunctionAndParameters_Call {
	_c.Call.Return(s, strings)
	return _c
}

func (_c *MockChaincodeStubInterface_GetFunctionAndParameters_Call) RunAndReturn(run func() (string, []string)) *MockChaincodeStubInterface_GetFunctionAndParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistoryForKey provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetHistoryForKey(key string) (shim.HistoryQueryIteratorInterface, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryForKey")
	}

	var r0 shim.HistoryQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (shim.HistoryQueryIteratorInterface, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) shim.HistoryQueryIteratorInterface); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.HistoryQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetHistoryForKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistoryForKey'
type MockChaincodeStubInterface_GetHistoryForKey_Call struct {
	*mock.Call
}

// GetHistoryForKey is a helper method to define mock.On call
//   - key
func (_e *MockChaincodeStubInterface_Expecter) GetHistoryForKey(key interface{}) *MockChaincodeStubInterface_GetHistoryForKey_Call {
	return &MockChaincodeStubInterface_GetHistoryForKey_Call{Call: _e.mock.On("GetHistoryForKey", key)}
}

func (_c *MockChaincodeStubInterface_GetHistoryForKey_Call) Run(run func(key string)) *MockChaincodeStubInterface_GetHistoryForKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetHistoryForKey_Call) Return(historyQueryIteratorInterface shim.HistoryQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetHistoryForKey_Call {
	_c.Call.Return(historyQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetHistoryForKey_Call) RunAndReturn(run func(key string) (shim.HistoryQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetHistoryForKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultiplePrivateData provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetMultiplePrivateData(collection string, keys ...string) ([][]byte, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(collection, keys)
	} else {
		tmpRet = _mock.Called(collection)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplePrivateData")
	}

	var r0 [][]byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) ([][]byte, error)); ok {
		return returnFunc(collection, keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) [][]byte); ok {
		r0 = returnFunc(collection, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(collection, keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetMultiplePrivateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiplePrivateData'
type MockChaincodeStubInterface_GetMultiplePrivateData_Call struct {
	*mock.Call
}

// GetMultiplePrivateData is a helper method to define mock.On call
//   - collection
//   - keys
func (_e *MockChaincodeStubInterface_Expecter) GetMultiplePrivateData(collection interface{}, keys ...interface{}) *MockChaincodeStubInterface_GetMultiplePrivateData_Call {
	return &MockChaincodeStubInterface_GetMultiplePrivateData_Call{Call: _e.mock.On("GetMultiplePrivateData",
		append([]interface{}{collection}, keys...)...)}
}

func (_c *MockChaincodeStubInterface_GetMultiplePrivateData_Call) Run(run func(collection string, keys ...string)) *MockChaincodeStubInterface_GetMultiplePrivateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]string)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetMultiplePrivateData_Call) Return(bytess [][]byte, err error) *MockChaincodeStubInterface_GetMultiplePrivateData_Call {
	_c.Call.Return(bytess, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetMultiplePrivateData_Call) RunAndReturn(run func(collection string, keys ...string) ([][]byte, error)) *MockChaincodeStubInterface_GetMultiplePrivateData_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultipleStates provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetMultipleStates(keys ...string) ([][]byte, error) {
	var tmpRet mock.Arguments
	if len(keys) > 0 {
		tmpRet = _mock.Called(keys)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMultipleStates")
	}

	var r0 [][]byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(...string) ([][]byte, error)); ok {
		return returnFunc(keys...)
	}
	if returnFunc, ok := ret.Get(0).(func(...string) [][]byte); ok {
		r0 = returnFunc(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(...string) error); ok {
		r1 = returnFunc(keys...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetMultipleStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultipleStates'
type MockChaincodeStubInterface_GetMultipleStates_Call struct {
	*mock.Call
}

// GetMultipleStates is a helper method to define mock.On call
//   - keys
func (_e *MockChaincodeStubInterface_Expecter) GetMultipleStates(keys ...interface{}) *MockChaincodeStubInterface_GetMultipleStates_Call {
	return &MockChaincodeStubInterface_GetMultipleStates_Call{Call: _e.mock.On("GetMultipleStates",
		append([]interface{}{}, keys...)...)}
}

func (_c *MockChaincodeStubInterface_GetMultipleStates_Call) Run(run func(keys ...string)) *MockChaincodeStubInterface_GetMultipleStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[0].([]string)
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetMultipleStates_Call) Return(bytess [][]byte, err error) *MockChaincodeStubInterface_GetMultipleStates_Call {
	_c.Call.Return(bytess, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetMultipleStates_Call) RunAndReturn(run func(keys ...string) ([][]byte, error)) *MockChaincodeStubInterface_GetMultipleStates_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateData provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetPrivateData(collection string, key string) ([]byte, error) {
	ret := _mock.Called(collection, key)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateData")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return returnFunc(collection, key)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = returnFunc(collection, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(collection, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetPrivateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateData'
type MockChaincodeStubInterface_GetPrivateData_Call struct {
	*mock.Call
}

// GetPrivateData is a helper method to define mock.On call
//   - collection
//   - key
func (_e *MockChaincodeStubInterface_Expecter) GetPrivateData(collection interface{}, key interface{}) *MockChaincodeStubInterface_GetPrivateData_Call {
	return &MockChaincodeStubInterface_GetPrivateData_Call{Call: _e.mock.On("GetPrivateData", collection, key)}
}

func (_c *MockChaincodeStubInterface_GetPrivateData_Call) Run(run func(collection string, key string)) *MockChaincodeStubInterface_GetPrivateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateData_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetPrivateData_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateData_Call) RunAndReturn(run func(collection string, key string) ([]byte, error)) *MockChaincodeStubInterface_GetPrivateData_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateDataByPartialCompositeKey provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetPrivateDataByPartialCompositeKey(collection string, objectType string, keys []string) (shim.StateQueryIteratorInterface, error) {
	ret := _mock.Called(collection, objectType, keys)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateDataByPartialCompositeKey")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, []string) (shim.StateQueryIteratorInterface, error)); ok {
		return returnFunc(collection, objectType, keys)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, []string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(collection, objectType, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = returnFunc(collection, objectType, keys)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateDataByPartialCompositeKey'
type MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call struct {
	*mock.Call
}

// GetPrivateDataByPartialCompositeKey is a helper method to define mock.On call
//   - collection
//   - objectType
//   - keys
func (_e *MockChaincodeStubInterface_Expecter) GetPrivateDataByPartialCompositeKey(collection interface{}, objectType interface{}, keys interface{}) *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call {
	return &MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call{Call: _e.mock.On("GetPrivateDataByPartialCompositeKey", collection, objectType, keys)}
}

func (_c *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call) Run(run func(collection string, objectType string, keys []string)) *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call {
	_c.Call.Return(stateQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call) RunAndReturn(run func(collection string, objectType string, keys []string) (shim.StateQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetPrivateDataByPartialCompositeKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateDataByRange provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetPrivateDataByRange(collection string, startKey string, endKey string) (shim.StateQueryIteratorInterface, error) {
	ret := _mock.Called(collection, startKey, endKey)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateDataByRange")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (shim.StateQueryIteratorInterface, error)); ok {
		return returnFunc(collection, startKey, endKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(collection, startKey, endKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(collection, startKey, endKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetPrivateDataByRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateDataByRange'
type MockChaincodeStubInterface_GetPrivateDataByRange_Call struct {
	*mock.Call
}

// GetPrivateDataByRange is a helper method to define mock.On call
//   - collection
//   - startKey
//   - endKey
func (_e *MockChaincodeStubInterface_Expecter) GetPrivateDataByRange(collection interface{}, startKey interface{}, endKey interface{}) *MockChaincodeStubInterface_GetPrivateDataByRange_Call {
	return &MockChaincodeStubInterface_GetPrivateDataByRange_Call{Call: _e.mock.On("GetPrivateDataByRange", collection, startKey, endKey)}
}

func (_c *MockChaincodeStubInterface_GetPrivateDataByRange_Call) Run(run func(collection string, startKey string, endKey string)) *MockChaincodeStubInterface_GetPrivateDataByRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataByRange_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetPrivateDataByRange_Call {
	_c.Call.Return(stateQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataByRange_Call) RunAndReturn(run func(collection string, startKey string, endKey string) (shim.StateQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetPrivateDataByRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateDataHash provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetPrivateDataHash(collection string, key string) ([]byte, error) {
	ret := _mock.Called(collection, key)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateDataHash")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return returnFunc(collection, key)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = returnFunc(collection, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(collection, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetPrivateDataHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateDataHash'
type MockChaincodeStubInterface_GetPrivateDataHash_Call struct {
	*mock.Call
}

// GetPrivateDataHash is a helper method to define mock.On call
//   - collection
//   - key
func (_e *MockChaincodeStubInterface_Expecter) GetPrivateDataHash(collection interface{}, key interface{}) *MockChaincodeStubInterface_GetPrivateDataHash_Call {
	return &MockChaincodeStubInterface_GetPrivateDataHash_Call{Call: _e.mock.On("GetPrivateDataHash", collection, key)}
}

func (_c *MockChaincodeStubInterface_GetPrivateDataHash_Call) Run(run func(collection string, key string)) *MockChaincodeStubInterface_GetPrivateDataHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataHash_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetPrivateDataHash_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataHash_Call) RunAndReturn(run func(collection string, key string) ([]byte, error)) *MockChaincodeStubInterface_GetPrivateDataHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateDataQueryResult provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetPrivateDataQueryResult(collection string, query string) (shim.StateQueryIteratorInterface, error) {
	ret := _mock.Called(collection, query)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateDataQueryResult")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (shim.StateQueryIteratorInterface, error)); ok {
		return returnFunc(collection, query)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(collection, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(collection, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetPrivateDataQueryResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateDataQueryResult'
type MockChaincodeStubInterface_GetPrivateDataQueryResult_Call struct {
	*mock.Call
}

// GetPrivateDataQueryResult is a helper method to define mock.On call
//   - collection
//   - query
func (_e *MockChaincodeStubInterface_Expecter) GetPrivateDataQueryResult(collection interface{}, query interface{}) *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call {
	return &MockChaincodeStubInterface_GetPrivateDataQueryResult_Call{Call: _e.mock.On("GetPrivateDataQueryResult", collection, query)}
}

func (_c *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call) Run(run func(collection string, query string)) *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call {
	_c.Call.Return(stateQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call) RunAndReturn(run func(collection string, query string) (shim.StateQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetPrivateDataQueryResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateDataValidationParameter provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetPrivateDataValidationParameter(collection string, key string) ([]byte, error) {
	ret := _mock.Called(collection, key)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateDataValidationParameter")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return returnFunc(collection, key)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = returnFunc(collection, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(collection, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateDataValidationParameter'
type MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call struct {
	*mock.Call
}

// GetPrivateDataValidationParameter is a helper method to define mock.On call
//   - collection
//   - key
func (_e *MockChaincodeStubInterface_Expecter) GetPrivateDataValidationParameter(collection interface{}, key interface{}) *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call {
	return &MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call{Call: _e.mock.On("GetPrivateDataValidationParameter", collection, key)}
}

func (_c *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call) Run(run func(collection string, key string)) *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call) RunAndReturn(run func(collection string, key string) ([]byte, error)) *MockChaincodeStubInterface_GetPrivateDataValidationParameter_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryResult provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetQueryResult(query string) (shim.StateQueryIteratorInterface, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResult")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (shim.StateQueryIteratorInterface, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetQueryResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryResult'
type MockChaincodeStubInterface_GetQueryResult_Call struct {
	*mock.Call
}

// GetQueryResult is a helper method to define mock.On call
//   - query
func (_e *MockChaincodeStubInterface_Expecter) GetQueryResult(query interface{}) *MockChaincodeStubInterface_GetQueryResult_Call {
	return &MockChaincodeStubInterface_GetQueryResult_Call{Call: _e.mock.On("GetQueryResult", query)}
}

func (_c *MockChaincodeStubInterface_GetQueryResult_Call) Run(run func(query string)) *MockChaincodeStubInterface_GetQueryResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetQueryResult_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetQueryResult_Call {
	_c.Call.Return(stateQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetQueryResult_Call) RunAndReturn(run func(query string) (shim.StateQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetQueryResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryResultWithPagination provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetQueryResultWithPagination(query string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _mock.Called(query, pageSize, bookmark)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResultWithPagination")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 *peer.QueryResponseMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, int32, string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)); ok {
		return returnFunc(query, pageSize, bookmark)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(query, pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int32, string) *peer.QueryResponseMetadata); ok {
		r1 = returnFunc(query, pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, int32, string) error); ok {
		r2 = returnFunc(query, pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockChaincodeStubInterface_GetQueryResultWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryResultWithPagination'
type MockChaincodeStubInterface_GetQueryResultWithPagination_Call struct {
	*mock.Call
}

// GetQueryResultWithPagination is a helper method to define mock.On call
//   - query
//   - pageSize
//   - bookmark
func (_e *MockChaincodeStubInterface_Expecter) GetQueryResultWithPagination(query interface{}, pageSize interface{}, bookmark interface{}) *MockChaincodeStubInterface_GetQueryResultWithPagination_Call {
	return &MockChaincodeStubInterface_GetQueryResultWithPagination_Call{Call: _e.mock.On("GetQueryResultWithPagination", query, pageSize, bookmark)}
}

func (_c *MockChaincodeStubInterface_GetQueryResultWithPagination_Call) Run(run func(query string, pageSize int32, bookmark string)) *MockChaincodeStubInterface_GetQueryResultWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetQueryResultWithPagination_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, queryResponseMetadata *peer.QueryResponseMetadata, err error) *MockChaincodeStubInterface_GetQueryResultWithPagination_Call {
	_c.Call.Return(stateQueryIteratorInterface, queryResponseMetadata, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetQueryResultWithPagination_Call) RunAndReturn(run func(query string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)) *MockChaincodeStubInterface_GetQueryResultWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignedProposal provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetSignedProposal() (*peer.SignedProposal, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSignedProposal")
	}

	var r0 *peer.SignedProposal
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*peer.SignedProposal, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *peer.SignedProposal); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.SignedProposal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetSignedProposal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignedProposal'
type MockChaincodeStubInterface_GetSignedProposal_Call struct {
	*mock.Call
}

// GetSignedProposal is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetSignedProposal() *MockChaincodeStubInterface_GetSignedProposal_Call {
	return &MockChaincodeStubInterface_GetSignedProposal_Call{Call: _e.mock.On("GetSignedProposal")}
}

func (_c *MockChaincodeStubInterface_GetSignedProposal_Call) Run(run func()) *MockChaincodeStubInterface_GetSignedProposal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetSignedProposal_Call) Return(signedProposal *peer.SignedProposal, err error) *MockChaincodeStubInterface_GetSignedProposal_Call {
	_c.Call.Return(signedProposal, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetSignedProposal_Call) RunAndReturn(run func() (*peer.SignedProposal, error)) *MockChaincodeStubInterface_GetSignedProposal_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetState(key string) ([]byte, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockChaincodeStubInterface_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - key
func (_e *MockChaincodeStubInterface_Expecter) GetState(key interface{}) *MockChaincodeStubInterface_GetState_Call {
	return &MockChaincodeStubInterface_GetState_Call{Call: _e.mock.On("GetState", key)}
}

func (_c *MockChaincodeStubInterface_GetState_Call) Run(run func(key string)) *MockChaincodeStubInterface_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetState_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetState_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetState_Call) RunAndReturn(run func(key string) ([]byte, error)) *MockChaincodeStubInterface_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateByPartialCompositeKey provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetStateByPartialCompositeKey(objectType string, keys []string) (shim.StateQueryIteratorInterface, error) {
	ret := _mock.Called(objectType, keys)

	if len(ret) == 0 {
		panic("no return value specified for GetStateByPartialCompositeKey")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, []string) (shim.StateQueryIteratorInterface, error)); ok {
		return returnFunc(objectType, keys)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(objectType, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = returnFunc(objectType, keys)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateByPartialCompositeKey'
type MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call struct {
	*mock.Call
}

// GetStateByPartialCompositeKey is a helper method to define mock.On call
//   - objectType
//   - keys
func (_e *MockChaincodeStubInterface_Expecter) GetStateByPartialCompositeKey(objectType interface{}, keys interface{}) *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call {
	return &MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call{Call: _e.mock.On("GetStateByPartialCompositeKey", objectType, keys)}
}

func (_c *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call) Run(run func(objectType string, keys []string)) *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call {
	_c.Call.Return(stateQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call) RunAndReturn(run func(objectType string, keys []string) (shim.StateQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetStateByPartialCompositeKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateByPartialCompositeKeyWithPagination provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetStateByPartialCompositeKeyWithPagination(objectType string, keys []string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _mock.Called(objectType, keys, pageSize, bookmark)

	if len(ret) == 0 {
		panic("no return value specified for GetStateByPartialCompositeKeyWithPagination")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 *peer.QueryResponseMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, []string, int32, string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)); ok {
		return returnFunc(objectType, keys, pageSize, bookmark)
	}
	if returnFunc, ok := ret.Get(0).(func(string, []string, int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(objectType, keys, pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, []string, int32, string) *peer.QueryResponseMetadata); ok {
		r1 = returnFunc(objectType, keys, pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, []string, int32, string) error); ok {
		r2 = returnFunc(objectType, keys, pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateByPartialCompositeKeyWithPagination'
type MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call struct {
	*mock.Call
}

// GetStateByPartialCompositeKeyWithPagination is a helper method to define mock.On call
//   - objectType
//   - keys
//   - pageSize
//   - bookmark
func (_e *MockChaincodeStubInterface_Expecter) GetStateByPartialCompositeKeyWithPagination(objectType interface{}, keys interface{}, pageSize interface{}, bookmark interface{}) *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call {
	return &MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call{Call: _e.mock.On("GetStateByPartialCompositeKeyWithPagination", objectType, keys, pageSize, bookmark)}
}

func (_c *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call) Run(run func(objectType string, keys []string, pageSize int32, bookmark string)) *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(int32), args[3].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, queryResponseMetadata *peer.QueryResponseMetadata, err error) *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call {
	_c.Call.Return(stateQueryIteratorInterface, queryResponseMetadata, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call) RunAndReturn(run func(objectType string, keys []string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)) *MockChaincodeStubInterface_GetStateByPartialCompositeKeyWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateByRange provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetStateByRange(startKey string, endKey string) (shim.StateQueryIteratorInterface, error) {
	ret := _mock.Called(startKey, endKey)

	if len(ret) == 0 {
		panic("no return value specified for GetStateByRange")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (shim.StateQueryIteratorInterface, error)); ok {
		return returnFunc(startKey, endKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(startKey, endKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(startKey, endKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetStateByRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateByRange'
type MockChaincodeStubInterface_GetStateByRange_Call struct {
	*mock.Call
}

// GetStateByRange is a helper method to define mock.On call
//   - startKey
//   - endKey
func (_e *MockChaincodeStubInterface_Expecter) GetStateByRange(startKey interface{}, endKey interface{}) *MockChaincodeStubInterface_GetStateByRange_Call {
	return &MockChaincodeStubInterface_GetStateByRange_Call{Call: _e.mock.On("GetStateByRange", startKey, endKey)}
}

func (_c *MockChaincodeStubInterface_GetStateByRange_Call) Run(run func(startKey string, endKey string)) *MockChaincodeStubInterface_GetStateByRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByRange_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, err error) *MockChaincodeStubInterface_GetStateByRange_Call {
	_c.Call.Return(stateQueryIteratorInterface, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByRange_Call) RunAndReturn(run func(startKey string, endKey string) (shim.StateQueryIteratorInterface, error)) *MockChaincodeStubInterface_GetStateByRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateByRangeWithPagination provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetStateByRangeWithPagination(startKey string, endKey string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	ret := _mock.Called(startKey, endKey, pageSize, bookmark)

	if len(ret) == 0 {
		panic("no return value specified for GetStateByRangeWithPagination")
	}

	var r0 shim.StateQueryIteratorInterface
	var r1 *peer.QueryResponseMetadata
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, int32, string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)); ok {
		return returnFunc(startKey, endKey, pageSize, bookmark)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, int32, string) shim.StateQueryIteratorInterface); ok {
		r0 = returnFunc(startKey, endKey, pageSize, bookmark)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shim.StateQueryIteratorInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, int32, string) *peer.QueryResponseMetadata); ok {
		r1 = returnFunc(startKey, endKey, pageSize, bookmark)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*peer.QueryResponseMetadata)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, int32, string) error); ok {
		r2 = returnFunc(startKey, endKey, pageSize, bookmark)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockChaincodeStubInterface_GetStateByRangeWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateByRangeWithPagination'
type MockChaincodeStubInterface_GetStateByRangeWithPagination_Call struct {
	*mock.Call
}

// GetStateByRangeWithPagination is a helper method to define mock.On call
//   - startKey
//   - endKey
//   - pageSize
//   - bookmark
func (_e *MockChaincodeStubInterface_Expecter) GetStateByRangeWithPagination(startKey interface{}, endKey interface{}, pageSize interface{}, bookmark interface{}) *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call {
	return &MockChaincodeStubInterface_GetStateByRangeWithPagination_Call{Call: _e.mock.On("GetStateByRangeWithPagination", startKey, endKey, pageSize, bookmark)}
}

func (_c *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call) Run(run func(startKey string, endKey string, pageSize int32, bookmark string)) *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int32), args[3].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call) Return(stateQueryIteratorInterface shim.StateQueryIteratorInterface, queryResponseMetadata *peer.QueryResponseMetadata, err error) *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call {
	_c.Call.Return(stateQueryIteratorInterface, queryResponseMetadata, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call) RunAndReturn(run func(startKey string, endKey string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error)) *MockChaincodeStubInterface_GetStateByRangeWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateValidationParameter provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetStateValidationParameter(key string) ([]byte, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStateValidationParameter")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetStateValidationParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateValidationParameter'
type MockChaincodeStubInterface_GetStateValidationParameter_Call struct {
	*mock.Call
}

// GetStateValidationParameter is a helper method to define mock.On call
//   - key
func (_e *MockChaincodeStubInterface_Expecter) GetStateValidationParameter(key interface{}) *MockChaincodeStubInterface_GetStateValidationParameter_Call {
	return &MockChaincodeStubInterface_GetStateValidationParameter_Call{Call: _e.mock.On("GetStateValidationParameter", key)}
}

func (_c *MockChaincodeStubInterface_GetStateValidationParameter_Call) Run(run func(key string)) *MockChaincodeStubInterface_GetStateValidationParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateValidationParameter_Call) Return(bytes []byte, err error) *MockChaincodeStubInterface_GetStateValidationParameter_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetStateValidationParameter_Call) RunAndReturn(run func(key string) ([]byte, error)) *MockChaincodeStubInterface_GetStateValidationParameter_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringArgs provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetStringArgs() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStringArgs")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockChaincodeStubInterface_GetStringArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringArgs'
type MockChaincodeStubInterface_GetStringArgs_Call struct {
	*mock.Call
}

// GetStringArgs is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetStringArgs() *MockChaincodeStubInterface_GetStringArgs_Call {
	return &MockChaincodeStubInterface_GetStringArgs_Call{Call: _e.mock.On("GetStringArgs")}
}

func (_c *MockChaincodeStubInterface_GetStringArgs_Call) Run(run func()) *MockChaincodeStubInterface_GetStringArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetStringArgs_Call) Return(strings []string) *MockChaincodeStubInterface_GetStringArgs_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockChaincodeStubInterface_GetStringArgs_Call) RunAndReturn(run func() []string) *MockChaincodeStubInterface_GetStringArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransient provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetTransient() (map[string][]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransient")
	}

	var r0 map[string][]byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (map[string][]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetTransient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransient'
type MockChaincodeStubInterface_GetTransient_Call struct {
	*mock.Call
}

// GetTransient is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetTransient() *MockChaincodeStubInterface_GetTransient_Call {
	return &MockChaincodeStubInterface_GetTransient_Call{Call: _e.mock.On("GetTransient")}
}

func (_c *MockChaincodeStubInterface_GetTransient_Call) Run(run func()) *MockChaincodeStubInterface_GetTransient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetTransient_Call) Return(stringToBytes map[string][]byte, err error) *MockChaincodeStubInterface_GetTransient_Call {
	_c.Call.Return(stringToBytes, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetTransient_Call) RunAndReturn(run func() (map[string][]byte, error)) *MockChaincodeStubInterface_GetTransient_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxID provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetTxID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTxID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockChaincodeStubInterface_GetTxID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxID'
type MockChaincodeStubInterface_GetTxID_Call struct {
	*mock.Call
}

// GetTxID is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetTxID() *MockChaincodeStubInterface_GetTxID_Call {
	return &MockChaincodeStubInterface_GetTxID_Call{Call: _e.mock.On("GetTxID")}
}

func (_c *MockChaincodeStubInterface_GetTxID_Call) Run(run func()) *MockChaincodeStubInterface_GetTxID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetTxID_Call) Return(s string) *MockChaincodeStubInterface_GetTxID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockChaincodeStubInterface_GetTxID_Call) RunAndReturn(run func() string) *MockChaincodeStubInterface_GetTxID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxTimestamp provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) GetTxTimestamp() (*timestamppb.Timestamp, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTxTimestamp")
	}

	var r0 *timestamppb.Timestamp
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*timestamppb.Timestamp, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *timestamppb.Timestamp); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestamppb.Timestamp)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChaincodeStubInterface_GetTxTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxTimestamp'
type MockChaincodeStubInterface_GetTxTimestamp_Call struct {
	*mock.Call
}

// GetTxTimestamp is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) GetTxTimestamp() *MockChaincodeStubInterface_GetTxTimestamp_Call {
	return &MockChaincodeStubInterface_GetTxTimestamp_Call{Call: _e.mock.On("GetTxTimestamp")}
}

func (_c *MockChaincodeStubInterface_GetTxTimestamp_Call) Run(run func()) *MockChaincodeStubInterface_GetTxTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_GetTxTimestamp_Call) Return(timestamp *timestamppb.Timestamp, err error) *MockChaincodeStubInterface_GetTxTimestamp_Call {
	_c.Call.Return(timestamp, err)
	return _c
}

func (_c *MockChaincodeStubInterface_GetTxTimestamp_Call) RunAndReturn(run func() (*timestamppb.Timestamp, error)) *MockChaincodeStubInterface_GetTxTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeChaincode provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) InvokeChaincode(chaincodeName string, args [][]byte, channel string) *peer.Response {
	ret := _mock.Called(chaincodeName, args, channel)

	if len(ret) == 0 {
		panic("no return value specified for InvokeChaincode")
	}

	var r0 *peer.Response
	if returnFunc, ok := ret.Get(0).(func(string, [][]byte, string) *peer.Response); ok {
		r0 = returnFunc(chaincodeName, args, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peer.Response)
		}
	}
	return r0
}

// MockChaincodeStubInterface_InvokeChaincode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeChaincode'
type MockChaincodeStubInterface_InvokeChaincode_Call struct {
	*mock.Call
}

// InvokeChaincode is a helper method to define mock.On call
//   - chaincodeName
//   - args
//   - channel
func (_e *MockChaincodeStubInterface_Expecter) InvokeChaincode(chaincodeName interface{}, args interface{}, channel interface{}) *MockChaincodeStubInterface_InvokeChaincode_Call {
	return &MockChaincodeStubInterface_InvokeChaincode_Call{Call: _e.mock.On("InvokeChaincode", chaincodeName, args, channel)}
}

func (_c *MockChaincodeStubInterface_InvokeChaincode_Call) Run(run func(chaincodeName string, args [][]byte, channel string)) *MockChaincodeStubInterface_InvokeChaincode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([][]byte), args[2].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_InvokeChaincode_Call) Return(response *peer.Response) *MockChaincodeStubInterface_InvokeChaincode_Call {
	_c.Call.Return(response)
	return _c
}

func (_c *MockChaincodeStubInterface_InvokeChaincode_Call) RunAndReturn(run func(chaincodeName string, args [][]byte, channel string) *peer.Response) *MockChaincodeStubInterface_InvokeChaincode_Call {
	_c.Call.Return(run)
	return _c
}

// PurgePrivateData provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) PurgePrivateData(collection string, key string) error {
	ret := _mock.Called(collection, key)

	if len(ret) == 0 {
		panic("no return value specified for PurgePrivateData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(collection, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_PurgePrivateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgePrivateData'
type MockChaincodeStubInterface_PurgePrivateData_Call struct {
	*mock.Call
}

// PurgePrivateData is a helper method to define mock.On call
//   - collection
//   - key
func (_e *MockChaincodeStubInterface_Expecter) PurgePrivateData(collection interface{}, key interface{}) *MockChaincodeStubInterface_PurgePrivateData_Call {
	return &MockChaincodeStubInterface_PurgePrivateData_Call{Call: _e.mock.On("PurgePrivateData", collection, key)}
}

func (_c *MockChaincodeStubInterface_PurgePrivateData_Call) Run(run func(collection string, key string)) *MockChaincodeStubInterface_PurgePrivateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_PurgePrivateData_Call) Return(err error) *MockChaincodeStubInterface_PurgePrivateData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_PurgePrivateData_Call) RunAndReturn(run func(collection string, key string) error) *MockChaincodeStubInterface_PurgePrivateData_Call {
	_c.Call.Return(run)
	return _c
}

// PutPrivateData provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) PutPrivateData(collection string, key string, value []byte) error {
	ret := _mock.Called(collection, key, value)

	if len(ret) == 0 {
		panic("no return value specified for PutPrivateData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = returnFunc(collection, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_PutPrivateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPrivateData'
type MockChaincodeStubInterface_PutPrivateData_Call struct {
	*mock.Call
}

// PutPrivateData is a helper method to define mock.On call
//   - collection
//   - key
//   - value
func (_e *MockChaincodeStubInterface_Expecter) PutPrivateData(collection interface{}, key interface{}, value interface{}) *MockChaincodeStubInterface_PutPrivateData_Call {
	return &MockChaincodeStubInterface_PutPrivateData_Call{Call: _e.mock.On("PutPrivateData", collection, key, value)}
}

func (_c *MockChaincodeStubInterface_PutPrivateData_Call) Run(run func(collection string, key string, value []byte)) *MockChaincodeStubInterface_PutPrivateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_PutPrivateData_Call) Return(err error) *MockChaincodeStubInterface_PutPrivateData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_PutPrivateData_Call) RunAndReturn(run func(collection string, key string, value []byte) error) *MockChaincodeStubInterface_PutPrivateData_Call {
	_c.Call.Return(run)
	return _c
}

// PutState provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) PutState(key string, value []byte) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for PutState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_PutState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutState'
type MockChaincodeStubInterface_PutState_Call struct {
	*mock.Call
}

// PutState is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockChaincodeStubInterface_Expecter) PutState(key interface{}, value interface{}) *MockChaincodeStubInterface_PutState_Call {
	return &MockChaincodeStubInterface_PutState_Call{Call: _e.mock.On("PutState", key, value)}
}

func (_c *MockChaincodeStubInterface_PutState_Call) Run(run func(key string, value []byte)) *MockChaincodeStubInterface_PutState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_PutState_Call) Return(err error) *MockChaincodeStubInterface_PutState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_PutState_Call) RunAndReturn(run func(key string, value []byte) error) *MockChaincodeStubInterface_PutState_Call {
	_c.Call.Return(run)
	return _c
}

// SetEvent provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) SetEvent(name string, payload []byte) error {
	ret := _mock.Called(name, payload)

	if len(ret) == 0 {
		panic("no return value specified for SetEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = returnFunc(name, payload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_SetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEvent'
type MockChaincodeStubInterface_SetEvent_Call struct {
	*mock.Call
}

// SetEvent is a helper method to define mock.On call
//   - name
//   - payload
func (_e *MockChaincodeStubInterface_Expecter) SetEvent(name interface{}, payload interface{}) *MockChaincodeStubInterface_SetEvent_Call {
	return &MockChaincodeStubInterface_SetEvent_Call{Call: _e.mock.On("SetEvent", name, payload)}
}

func (_c *MockChaincodeStubInterface_SetEvent_Call) Run(run func(name string, payload []byte)) *MockChaincodeStubInterface_SetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_SetEvent_Call) Return(err error) *MockChaincodeStubInterface_SetEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_SetEvent_Call) RunAndReturn(run func(name string, payload []byte) error) *MockChaincodeStubInterface_SetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SetPrivateDataValidationParameter provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) SetPrivateDataValidationParameter(collection string, key string, ep []byte) error {
	ret := _mock.Called(collection, key, ep)

	if len(ret) == 0 {
		panic("no return value specified for SetPrivateDataValidationParameter")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = returnFunc(collection, key, ep)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPrivateDataValidationParameter'
type MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call struct {
	*mock.Call
}

// SetPrivateDataValidationParameter is a helper method to define mock.On call
//   - collection
//   - key
//   - ep
func (_e *MockChaincodeStubInterface_Expecter) SetPrivateDataValidationParameter(collection interface{}, key interface{}, ep interface{}) *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call {
	return &MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call{Call: _e.mock.On("SetPrivateDataValidationParameter", collection, key, ep)}
}

func (_c *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call) Run(run func(collection string, key string, ep []byte)) *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call) Return(err error) *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call) RunAndReturn(run func(collection string, key string, ep []byte) error) *MockChaincodeStubInterface_SetPrivateDataValidationParameter_Call {
	_c.Call.Return(run)
	return _c
}

// SetStateValidationParameter provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) SetStateValidationParameter(key string, ep []byte) error {
	ret := _mock.Called(key, ep)

	if len(ret) == 0 {
		panic("no return value specified for SetStateValidationParameter")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = returnFunc(key, ep)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChaincodeStubInterface_SetStateValidationParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStateValidationParameter'
type MockChaincodeStubInterface_SetStateValidationParameter_Call struct {
	*mock.Call
}

// SetStateValidationParameter is a helper method to define mock.On call
//   - key
//   - ep
func (_e *MockChaincodeStubInterface_Expecter) SetStateValidationParameter(key interface{}, ep interface{}) *MockChaincodeStubInterface_SetStateValidationParameter_Call {
	return &MockChaincodeStubInterface_SetStateValidationParameter_Call{Call: _e.mock.On("SetStateValidationParameter", key, ep)}
}

func (_c *MockChaincodeStubInterface_SetStateValidationParameter_Call) Run(run func(key string, ep []byte)) *MockChaincodeStubInterface_SetStateValidationParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_SetStateValidationParameter_Call) Return(err error) *MockChaincodeStubInterface_SetStateValidationParameter_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChaincodeStubInterface_SetStateValidationParameter_Call) RunAndReturn(run func(key string, ep []byte) error) *MockChaincodeStubInterface_SetStateValidationParameter_Call {
	_c.Call.Return(run)
	return _c
}

// SplitCompositeKey provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) SplitCompositeKey(compositeKey string) (string, []string, error) {
	ret := _mock.Called(compositeKey)

	if len(ret) == 0 {
		panic("no return value specified for SplitCompositeKey")
	}

	var r0 string
	var r1 []string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, []string, error)); ok {
		return returnFunc(compositeKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(compositeKey)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) []string); ok {
		r1 = returnFunc(compositeKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(compositeKey)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockChaincodeStubInterface_SplitCompositeKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SplitCompositeKey'
type MockChaincodeStubInterface_SplitCompositeKey_Call struct {
	*mock.Call
}

// SplitCompositeKey is a helper method to define mock.On call
//   - compositeKey
func (_e *MockChaincodeStubInterface_Expecter) SplitCompositeKey(compositeKey interface{}) *MockChaincodeStubInterface_SplitCompositeKey_Call {
	return &MockChaincodeStubInterface_SplitCompositeKey_Call{Call: _e.mock.On("SplitCompositeKey", compositeKey)}
}

func (_c *MockChaincodeStubInterface_SplitCompositeKey_Call) Run(run func(compositeKey string)) *MockChaincodeStubInterface_SplitCompositeKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChaincodeStubInterface_SplitCompositeKey_Call) Return(s string, strings []string, err error) *MockChaincodeStubInterface_SplitCompositeKey_Call {
	_c.Call.Return(s, strings, err)
	return _c
}

func (_c *MockChaincodeStubInterface_SplitCompositeKey_Call) RunAndReturn(run func(compositeKey string) (string, []string, error)) *MockChaincodeStubInterface_SplitCompositeKey_Call {
	_c.Call.Return(run)
	return _c
}

// StartWriteBatch provides a mock function for the type MockChaincodeStubInterface
func (_mock *MockChaincodeStubInterface) StartWriteBatch() {
	_mock.Called()
	return
}

// MockChaincodeStubInterface_StartWriteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartWriteBatch'
type MockChaincodeStubInterface_StartWriteBatch_Call struct {
	*mock.Call
}

// StartWriteBatch is a helper method to define mock.On call
func (_e *MockChaincodeStubInterface_Expecter) StartWriteBatch() *MockChaincodeStubInterface_StartWriteBatch_Call {
	return &MockChaincodeStubInterface_StartWriteBatch_Call{Call: _e.mock.On("StartWriteBatch")}
}

func (_c *MockChaincodeStubInterface_StartWriteBatch_Call) Run(run func()) *MockChaincodeStubInterface_StartWriteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChaincodeStubInterface_StartWriteBatch_Call) Return() *MockChaincodeStubInterface_StartWriteBatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChaincodeStubInterface_StartWriteBatch_Call) RunAndReturn(run func()) *MockChaincodeStubInterface_StartWriteBatch_Call {
	_c.Run(run)
	return _c
}
